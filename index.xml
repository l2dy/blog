<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Zero&#39;s Shelter</title>
    <link>https://l2dy.github.io/blog/</link>
    <description>Recent content on Zero&#39;s Shelter</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 06 Nov 2019 16:01:00 +0000</lastBuildDate>
    <atom:link href="https://l2dy.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Recover Skipped Phases in a Portfile</title>
      <link>https://l2dy.github.io/blog/posts/2019/recover-skipped-phases/</link>
      <pubDate>Wed, 06 Nov 2019 16:01:00 +0000</pubDate>
      <guid>https://l2dy.github.io/blog/posts/2019/recover-skipped-phases/</guid>
      <description>Introduction The ruby-1.0 PortGroup has a special fetch mode that allows us to customize the build while handling subports and the ${ruby.suffix} variable itself. For example:
PortGroup ruby 1.0 ruby.branches 2.6 2.5 2.4 ruby.setup ronn-ng 0.8.2 fetch However, the fetch mode (called type in the PortGroup) clears the build phase. So how could we make MacPorts run build.cmd while using this PortGroup?
fetch { # do nothing but fetch and extract - for strange installers build {} } Solution There is a mysterious piece of code in gem mode (same PortGroup).</description>
    </item>
    <item>
      <title>Path-Aware Git Config</title>
      <link>https://l2dy.github.io/blog/posts/2019/path-aware-git-config/</link>
      <pubDate>Tue, 05 Nov 2019 14:53:40 +0000</pubDate>
      <guid>https://l2dy.github.io/blog/posts/2019/path-aware-git-config/</guid>
      <description>Introduction Most companies would ask employees to use their company email addresses in internal Git repositories. But many of us are not comfortable with using the company email in personal contributions to open source projects. Meanwhile, for people who have become a committer in several open source organizations and were assigned email addresses specific to them, if they prefer attributing contributions to the corresponding organization email addresses, they have to set separate git config in each repository, or else the email used will be the global default.</description>
    </item>
    <item>
      <title>The Missing MacOSX10.14.sdk</title>
      <link>https://l2dy.github.io/blog/posts/2019/the-missing-dot-sdk/</link>
      <pubDate>Mon, 04 Nov 2019 15:16:40 +0000</pubDate>
      <guid>https://l2dy.github.io/blog/posts/2019/the-missing-dot-sdk/</guid>
      <description>Introduction Some ports in MacPorts would bake the platform SDK paths into build flags used to build dependent ports. For example, the ruby24 port remembers its build flags in the rbconfig.rb file, and uses these flags to build gems with native C extensions.
# /opt/local/lib/ruby2.4/2.4.0/x86_64-darwin18/rbconfig.rb CONFIG[&amp;#34;CPPFLAGS&amp;#34;] = &amp;#34;-I/opt/local/include -isysroot/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.14.sdk -I/opt/local/include -D_XOPEN_SOURCE -D_DARWIN_C_SOURCE -D_DARWIN_UNLIMITED_SELECT -D_REENTRANT $(DEFS) $(cppflags)&amp;#34; CONFIG[&amp;#34;LDFLAGS&amp;#34;] = &amp;#34;-L. -L/opt/local/lib -Wl,-headerpad_max_install_names -Wl,-syslibroot,/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.14.sdk -fstack-protector -L/opt/local/lib&amp;#34; CONFIG[&amp;#34;CFLAGS&amp;#34;] = &amp;#34;-pipe -Os -isysroot/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.14.sdk -fno-common&amp;#34; So when macOS Mojave users upgrade to Xcode 11, which only provides MacOSX10.</description>
    </item>
    <item>
      <title>ZFS Autostart on Debian 10</title>
      <link>https://l2dy.github.io/blog/posts/2019/zfs-autostart-on-debian-10/</link>
      <pubDate>Sun, 03 Nov 2019 09:04:00 +0000</pubDate>
      <guid>https://l2dy.github.io/blog/posts/2019/zfs-autostart-on-debian-10/</guid>
      <description>Background A pastebin service could save a lot of disk space with file compression. Mojopaste doesn&amp;rsquo;t natively support file compression, so FS-level file compression is easier to set up.
VDO, ZFS and Btrfs all support transparent file compression. I picked ZFS because it&amp;rsquo;s the most mature one among them.
Problems Installing zfs-dkms on Debian didn&amp;rsquo;t succeed at first. I had to manually run /sbin/modprobe zfs to continue the installation. The zfs module does not automatically load after reboot, and zfs services fails to start.</description>
    </item>
  </channel>
</rss>
